/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gomokuGui;

import cli.GomokuMove;
import cli.GomokuPlay;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;

/**
 *
 * @author otmangx
 */
public class paintPanel extends javax.swing.JPanel {
    public static final String backgroundColor = "#BB6027";
    GomokuPlay game;
    GomokuMove move=new GomokuMove(0, 0);
    public GomokuMove hovermove;
    
    int width = 400;
    int height = 400;
    int size = 27;
    boolean first=true;
    Ellipse2D[][] positions = new Ellipse2D[15][15];
    
    /**
     * Creates new form paintPanel
     */
    public paintPanel() {
        initComponents();
        
    }

    
    public void startGame() {
        game = GomokuPlay.getCurrentGame();
    }
    
    
    public void setPowns() {

        width = getSize().width-50;
        height = getSize().height-50;

        size = (int)height/14;
        int x=0,y=0;
        for (int i = 25; x < 15; i += size) {
            for (int j = (width/2-height/2)+25; y < 15; j += size) {
                    positions[x][y]= new Ellipse2D.Float(j-size/2, i-size/2, size, size);
                y++;    
            }
            x++;
            y=0;
        }
    }
    
    public void paintBoard(Graphics2D g) {        
        for (int i = 25; i < height; i += size) {
            for (int j =(width/2-height/2)+25; j < (width/2+height/2); j += size) {
                g.setColor(Color.black);
                g.drawRect(j, i, size, size);      
            }
        }
    }
    
    public void paintPawns(Graphics2D g) {
        if(game!=null) {
            
            if(hovermove!=null) {
                if (game.board.nextPlayer=='x') g.setPaint(new Color(0, 0, 0, 80));
                else g.setPaint(new Color(255, 255, 255, 80));
                g.fill(positions[hovermove.getX()][hovermove.getY()]);
                hovermove=null;
            }
            
            g.setPaint(Color.black);
            for (GomokuMove move:game.board.getPlayerPlaces('x')) {
                g.fill(positions[move.getX()][move.getY()]);
            }
            
            g.setPaint(Color.white);
            for (GomokuMove move:game.board.getPlayerPlaces('o')) {
                g.fill(positions[move.getX()][move.getY()]);
            }
            
            if(game.hint) {
                GomokuMove move = game.hint();
                 g.setPaint(Color.green);
                g.fill(positions[move.getX()][move.getY()]);
            }
            
        }
        
    }
    
    
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        if(first) {
            setPowns();
            first=false;
        }
        
        setBackground(Color.decode(backgroundColor));
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
        RenderingHints.VALUE_ANTIALIAS_ON);
        
        // paint the board
        paintBoard(g2);
        // paint the pawns
        paintPawns(g2);
        
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (game.mode!=3) { // isn't a replay mode
        for(int i=0;i<15;i++) 
            for(int j=0;j<15;j++) {
                if (positions[i][j].contains(evt.getPoint())) {
                    move.setX(i);
                    move.setY(j);
                    game.makeTurn(move);

                  repaint();
                  break;
                }
            }
        }
        
    }//GEN-LAST:event_formMouseClicked

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if (game.mode!=3) { // isn't a replay mode
            for(int i=0;i<15;i++) 
                for(int j=0;j<15;j++) {
                    if (positions[i][j].contains(evt.getPoint())) {
                        hovermove= new GomokuMove(i, j);
                        repaint();
                        break;
                    }
                }
        }
        
    }//GEN-LAST:event_formMouseMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
